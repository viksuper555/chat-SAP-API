package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"messenger/graph/customTypes"
	"messenger/graph/generated"
	"messenger/internal/common"
	"messenger/model"
	"time"
)

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input customTypes.NewMessage) (*customTypes.Message, error) {
	//context := common.GetContext(ctx)
	//var user model.User
	//err := common.Db.Where(&model.User{ID: input.UserID}).First(&user).Error
	//if err != nil {
	//	return nil, err
	//}
	msg := &model.Message{
		Text:   input.Text,
		Sender: input.UserID,
		Date:   time.Now(),
		UserID: uint(input.UserID),
	}
	err := common.Db.Create(&msg).Error
	if err != nil {
		return nil, err
	}

	res := &customTypes.Message{
		ID:   msg.ID,
		Text: input.Text,
		Date: time.Now(),
	}
	return res, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input customTypes.UserPass) (*customTypes.User, error) {
	//context := common.GetContext(ctx)
	user := &model.User{
		Name:     input.Username,
		Password: input.Password,
	}
	err := common.Db.Create(&user).Error
	if err != nil {
		return nil, err
	}

	res := &customTypes.User{
		ID:   user.ID,
		Name: user.Name,
	}
	return res, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input customTypes.UserPass) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// GetMessages is the resolver for the getMessages field.
func (r *queryResolver) GetMessages(ctx context.Context) ([]*customTypes.Message, error) {
	context := common.GetContext(ctx)
	var messages []*model.Message
	err := context.Database.Find(&messages).Error
	if err != nil {
		return nil, err
	}
	return model.MessagesToGraph(messages), nil
}

// GetUserMessages is the resolver for the getUserMessages field.
func (r *queryResolver) GetUserMessages(ctx context.Context, userID int) ([]*customTypes.Message, error) {
	context := common.GetContext(ctx)
	var messages []*model.Message
	err := context.Database.Where(&model.Message{Sender: userID}).Find(&messages).Error
	if err != nil {
		return nil, err
	}
	return model.MessagesToGraph(messages), nil
}

// GetMessage is the resolver for the getMessage field.
func (r *queryResolver) GetMessage(ctx context.Context, messageID int) (*customTypes.Message, error) {
	context := common.GetContext(ctx)
	var msg model.Message
	err := context.Database.Where(&model.Message{ID: messageID}).First(&msg).Error
	if err != nil {
		return nil, err
	}
	return msg.ToGraph(), nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*customTypes.User, error) {
	context := common.GetContext(ctx)
	var users []*model.User
	err := context.Database.Find(&users).Error
	if err != nil {
		return nil, err
	}
	return model.UsersToGraph(users), nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID int) (*customTypes.User, error) {
	context := common.GetContext(ctx)
	var u model.User
	err := context.Database.Where(&model.User{ID: userID}).First(&u).Error
	if err != nil {
		return nil, err
	}
	return u.ToGraph(), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
